package wirepod_vosk
import (
	"encoding/json"
	"log"
	"strconv"
	// "io/ioutil"
	"os"
	"fmt"
	// "bufio"
	"time"
	"bytes"
	"strings"
	// "io/ioutil"

	vosk "github.com/alphacep/vosk-api/go"
	"github.com/kercre123/chipper/pkg/logger"
	"github.com/kercre123/chipper/pkg/vars"
	sr "github.com/kercre123/chipper/pkg/wirepod/speechrequest"

	"os/exec"

	// "github.com/go-audio/aiff"
	// "github.com/go-audio/audio"
	// "github.com/go-audio/wav"
	// "github.com/youpy/go-wav"
)

var Name string = "vosk"

var model *vosk.VoskModel
var modelLoaded bool
var fp *os.File
var fp_asr *os.File

func Init() error {
	if vars.APIConfig.PastInitialSetup {
		vosk.SetLogLevel(-1)
		if modelLoaded {
			logger.Println("A model was already loaded, freeing")
			model.Free()
		}
		sttLanguage := vars.APIConfig.STT.Language
		if len(sttLanguage) == 0 {
			sttLanguage = "en-US"
		}
		// Open model
		modelPath := "../vosk/models/" + sttLanguage + "/model"
		logger.Println("Opening VOSK model (" + modelPath + ")")
		aModel, err := vosk.NewModel(modelPath)
		if err != nil {
			log.Fatal(err)
			return err
		}
		model = aModel
		modelLoaded = true
		logger.Println("VOSK initiated successfully")

	}
	return nil
}
const ShellToUse = "bash"

func Shellout(command string) (string, string, error) {
    var stdout bytes.Buffer
    var stderr bytes.Buffer
    cmd := exec.Command(ShellToUse, "-c", command)
    cmd.Stdout = &stdout
    cmd.Stderr = &stderr
    err := cmd.Run()
    return stdout.String(), stderr.String(), err
}

func STT(req sr.SpeechRequest) (string, error) {
	logger.Println("(Bot " + strconv.Itoa(req.BotNum) + ", Vosk) Processing...")

	curTime := time.Now()	
	fname := fmt.Sprintf("dump/raw_%d%d%d-%d-%d-%d.pcm",curTime.Year(),curTime.Month(),curTime.Day(),curTime.Hour(),curTime.Minute(),curTime.Second())
	fname_asr := fmt.Sprintf("dump/raw.pcm")

	
	fp,_ = os.OpenFile(fname, os.O_CREATE|os.O_WRONLY, 0644)
	_ = os.Remove(fname_asr)
	fp_asr,_ = os.OpenFile(fname_asr, os.O_CREATE|os.O_WRONLY, 0644)

	// out, err := os.Create("dump/raw.wav")

	// var numSamples uint32 = 2
	// var numChannels uint16 = 2
	// var bitsPerSample uint16 = 16


	speechIsDone := false
	sampleRate := 16000.0

	// writer := wav.NewWriter(out, numSamples, numChannels, uint32(sampleRate), bitsPerSample)


	rec, err := vosk.NewRecognizer(model, sampleRate)
	if err != nil {
		log.Fatal(err)
	}
	rec.SetWords(1)
	rec.AcceptWaveform(req.FirstReq)
	for {
		var chunk []byte
		req, chunk, err = sr.GetNextStreamChunk(req)
		if err != nil {
			return "", err
		}
		rec.AcceptWaveform(chunk)
		// has to be split into 320 []byte chunks for VAD
		req, speechIsDone = sr.DetectEndOfSpeech(req)

		// err = ioutil.WriteFile("raw.pcm", chunk, 0644)
		fp.Write(chunk)
		fp_asr.Write(chunk)

		// chunkByte := int32(chunk)

		// err, _ = writer.Write(chunk)


		if speechIsDone {
			break
		}
		
	}

	fp.Close()
	fp_asr.Close()

	// out.Close()
	execPath, err := os.Getwd()
	execPath = fmt.Sprintf("%s/asr.sh", execPath)
	logger.Println("Current Path",execPath)
	asrOut, _, _ := Shellout(execPath)
	
	asrOutId := strings.LastIndex(asrOut, "}")
	asrOut = asrOut[asrOutId+2:]
	logger.Println("google ASR output:", asrOut)
	// cmd := exec.Command("aplay", "-r","16000","/home/kjh948/workspace/wire-pod/chipper/dump/raw.pcm")
	// cmd := exec.Command("ps")
	// // cmd := exec.Command("/home/kjh948/workspace/wire-pod/chipper/asr.sh")
    // stdout, err := cmd.StdoutPipe()

    // if err != nil {
	// 	logger.Println("pipe error")
    //     log.Fatal(err)
    // }

    // cmd.Start()
	// logger.Println("aplay started")

	// // if err := cmd.Wait(); err != nil {
	// // 	logger.Println(err)
	// // }
    // buf := bufio.NewReader(stdout) 
    // num := 0

    // for {
    //     line, _, _ := buf.ReadLine()
    //     if num > 3 {
    //         break
    //     }
    //     num += 1
    //     fmt.Println(string(line))
    // }
	logger.Println("pipe end")

	// out, err := exec.Command("bash", "-c", "ps cax | grep python").Output()
	// logger.Println(string(out))
	// grep := exec.Command("grep", "python")
    // ps := exec.Command("ps", "ef")

    // // Get ps's stdout and attach it to grep's stdin.
    // pipe, _ := ps.StdoutPipe()
    // defer pipe.Close()

    // grep.Stdin = pipe

    // // Run ps first.
    // ps.Start()

    // // Run and get the output of grep.
    // res, _ := grep.Output()

    // fmt.Println(string(res))


	// // cmd := exec.Command("aplay -r 16000 ", fname)
	// cmd := exec.Command("python3","--version")
	// stdout, err := cmd.StdoutPipe()

	// if err := cmd.Start(); err != nil {
	// 	logger.Println(err)
	// }

	// // data, err := ioutil.ReadAll(stdout)

	// if err := cmd.Wait(); err != nil {
	// 	logger.Println(err)
	// }

	// logger.Println(stdout)


	var jres map[string]interface{}
	json.Unmarshal([]byte(rec.FinalResult()), &jres)
	transcribedText := jres["text"].(string)
	logger.Println("Bot " + strconv.Itoa(req.BotNum) + " Transcribed text: " + transcribedText)


	transcribedText = asrOut

	logger.Println("Google ASR Bot " + strconv.Itoa(req.BotNum) + " Transcribed text: " + transcribedText)


	return transcribedText, nil
}
